#!/usr/bin/env node

// bugs
//  - /node_modules/ncore/node_modules
//  - doesn't include files not picked up by dependencySet

var program = require("commander"),
    _package = require("../package.json"),
    path = require("path"),
    pd = require("pd"),
    fs = require("fs"),
    after = require("after"),
    DependencyWriter = require("../modules/dependencyWriter"),
    wrench = require("wrench"),
    browserify = require("browserify")

program
    .version(_package.version)
    .usage('[options] <file>')
    .option("-o, --out [value]", "output file location")
    .option("--opinion", "undo opinionated bullshit")
    .parse(process.argv)

var moduleUri = path.join(process.cwd(), program.args.pop())

var dependencies = require(path.join(moduleUri, "dependency.json")),
    core = { dependencies: {} },
    cache = {}

var code = "(function () { \n" +
    "var ncore = require('ncore')\n" +
    "var Core = Object.create(ncore).constructor()\n"

var done = after(2, next)

after.forEach(dependencies, function (depObject, fileName, callback) {
    if (fileName.indexOf("server") === -1) {
        return writeDependencies(depObject, fileName, callback)
    }
    callback()
}, done)

readDir(moduleUri, readFiles)
console.log(moduleUri)

function readFiles(err, files) {
    if (err) {
        throw err
    }
    if (!program.opinion) {
        files = files.filter(function (uri) {
            return uri.indexOf("server") === -1
        })
    }
    console.log("files", files)
    after.forEach(files, tunnelWriteDependencies, done)
}

function tunnelWriteDependencies(fileName, callback) {
    var relative = path.relative(moduleUri, fileName)
    if (relative.indexOf(".json") === -1) {
        writeDependencies({},
            path.relative(moduleUri, fileName), callback)    
    } else {
        callback()
    }
}

function writeDependencies(depObject, fileName, callback) {
    console.log("writeDependencies", depObject, fileName)
    var dw = DependencyWriter({
        uri: path.join(moduleUri, fileName),
        originalUri: moduleUri,
        depObject: depObject,
        core: core,
        callback: callback
    })

    dw.emitter.on("dependencySet", function (name, uri) {
        if (cache[name]) {
            return
        }
        uri = "./" + path.relative(moduleUri, uri)
        cache[name] = true
        code += "Core.add('" + name + "', require('" + uri + "')) \n"
    })
}

function next() {
    var bundle = browserify({
        debug: true,
        cache: false
    })

    code += "Core.dependencies = " + JSON.stringify(core.dependencies) + "\n"
    code += "Core.init()\n"
    code += "})()"

    bundle.require("ncore")

    bundle.addEntry(path.join(moduleUri, "dummy.js"), { body: code })

    code = bundle.bundle()

    fs.writeFile(path.join(process.cwd(), program.out), code)
}

function flatten(array) {
    return array.reduce(function (memo, value) {
        if (Array.isArray(value)) {
            return memo.concat(flatten(value))
        }
        memo[memo.length] = value
        return memo
    }, [])
}

function readDir(start, callback) {
    fs.readdir(start, function (err, files) {
        if (err) {
            return callback(err)
        }

        after.map(files.map(function (fileName) {
            return path.join(start, fileName)
        }), function (name, done) {
            fs.stat(name, function (err, stat) {
                if (stat.isDirectory()) {
                    readDir(name, function (err, files) {
                        done(err, files && flatten(files))
                    })
                } else if (stat.isFile()) {
                    done(err, name)
                }
            })
        }, function (err, files) {
            callback(err, files && flatten(files).filter(function (value) {
                return value !== undefined
            }))
        })
    })
}