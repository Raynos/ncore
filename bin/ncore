#!/usr/bin/env node

// bugs
//  - /node_modules/ncore/node_modules
//  - doesn't include files not picked up by dependencySet

var program = require("commander"),
    _package = require("../package.json"),
    path = require("path"),
    pd = require("pd"),
    fs = require("fs"),
    after = require("after"),
    DependencyWriter = require("../modules/dependencyWriter"),
    wrench = require("wrench"),
    browserify = require("browserify")

program
    .version(_package.version)
    .usage('[options] <file>')
    .option("-o, --out [value]", "output file location")
    .parse(process.argv)

var moduleUri = path.join(process.cwd(), program.args.pop())

var dependencies = require(path.join(moduleUri, "dependency.json")),
    core = { dependencies: {} },
    cache = {}

var code = "(function () { \n" +
    "var Core = Object.create(nCore).constructor()\n" + 
    "delete window.nCore \n"

var done = after(2, next)

after.forEach(dependencies, writeDependencies, done)

readDir(moduleUri, readFiles)

function readFiles(err, files) {
    if (err) {
        throw err
    }
    after.forEach(files.files, tunnelWriteDependencies, done)
}

function tunnelWriteDependencies(fileName, callback) {
    var relative = path.relative(moduleUri, fileName)
    if (relative.indexOf(".json") === -1) {
        writeDependencies({},
            path.relative(moduleUri, fileName), callback)    
    } else {
        callback()
    }
}

function writeDependencies(depObject, fileName, callback) {
    console.log("writeDependencies", depObject, fileName)
    var dw = DependencyWriter({
        uri: path.join(moduleUri, fileName),
        originalUri: moduleUri,
        depObject: depObject,
        core: core,
        callback: callback
    })

    dw.emitter.on("dependencySet", function (name, uri) {
        if (cache[name]) {
            return
        }
        uri = "./" + path.relative(moduleUri, uri)
        cache[name] = true
        code += "Core.use('" + name + "', require('" + uri + "')) \n"
    })
}

function next() {
    var bundle = browserify({
        debug: true
    })

    code += "Core.dependencies = " + JSON.stringify(core.dependencies) + "\n"
    code += "Core.init()\n"
    code += "})()"

    bundle.addEntry(path.join(__dirname, "../lib/browser.js"))

    bundle.addEntry(path.join(moduleUri, "dummy.js"), { body: code })

    code = bundle.bundle()

    code = code.replace(/\/ncore\/node_modules/g, "")

    fs.writeFile(path.join(process.cwd(), program.out), code)
}

function readDir(start, callback) {
    // Use lstat to resolve symlink if we are passed a symlink
    fs.lstat(start, function(err, stat) {
        if(err) {
            return callback(err);
        }
        var found = {dirs: [], files: []},
            total = 0,
            processed = 0;
        function isDir(abspath) {
            fs.stat(abspath, function(err, stat) {
                if(stat.isDirectory()) {
                    found.dirs.push(abspath);
                    // If we found a directory, recurse!
                    readDir(abspath, function(err, data) {
                        found.dirs = found.dirs.concat(data.dirs);
                        found.files = found.files.concat(data.files);
                        if(++processed == total) {
                            callback(null, found);
                        }
                    });
                } else {
                    found.files.push(abspath);
                    if(++processed == total) {
                        callback(null, found);
                    }
                }
            });
        }
        // Read through all the files in this directory
        if(stat.isDirectory()) {
            fs.readdir(start, function (err, files) {
                total = files.length;
                for(var x=0, l=files.length; x<l; x++) {
                    isDir(path.join(start, files[x]));
                }
            });
        } else {
            return callback(new Error("path: " + start + " is not a directory"));
        }
    });
}